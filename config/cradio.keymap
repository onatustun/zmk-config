#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        commaqmrk: commaqmrk {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAQMRK";
            bindings = <&kp COMMA>, <&kp QUESTION>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dotless: dotless {
            compatible = "zmk,behavior-mod-morph";
            label = "DOTLESS";
            bindings = <&kp PERIOD>, <&kp LESS_THAN>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slashgreater: slashgreater {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASHGREATER";
            bindings = <&kp SLASH>, <&kp GREATER_THAN>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Hold-tap behaviors for modifiers
        sh_lctrl: sticky_hold_lctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HOLD_LCTRL";
            bindings = <&kp LCTRL>, <&sk LCTRL>; // Hold sends LCTRL, tap sends sticky LCTRL
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            // ignore-modifiers is true by default for sticky keys,
            // allowing combination of sticky modifiers.
        };

        sh_lalt: sticky_hold_lalt {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HOLD_LALT";
            bindings = <&kp LALT>, <&sk LALT>; // Hold sends LALT, tap sends sticky LALT
            #binding-cells = <0>;
            tapping-term-ms = <300>;
        };

        sh_lshift: sticky_hold_lshift {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HOLD_LSHIFT";
            bindings = <&kp LSHFT>, <&sk LSHFT>; // Hold sends LSHFT, tap sends sticky LSHFT
            #binding-cells = <0>;
            tapping-term-ms = <300>;
        };

        sh_lgui: sticky_hold_lgui {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HOLD_LGUI";
            bindings = <&kp LGUI>, <&sk LGUI>; // Hold sends LGUI, tap sends sticky LGUI
            #binding-cells = <0>;
            tapping-term-ms = <300>;
        };

        // Your existing stickyhold behavior (consider if you still need this
        // or if the specific modifier behaviors are sufficient)
        stickyhold: stickyhold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKYHOLD";
            bindings = <&kp>, <&sk>;
            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y      &kp U  &kp I       &kp O     &kp P
&kp A  &kp S  &kp D  &kp F  &kp G        &kp H      &kp J  &kp K       &kp L     &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B        &kp N      &kp M  &commaqmrk  &dotless  &slashgreater
                     &mo 2  &sh_lshift   &kp SPACE  &mo 1 // Using sticky_hold_lshift for Left Shift
            >;
        };

        layer_1 {
            bindings = <
&kp GRAVE  &kp APOS  &none   &none   &none     &none   &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT
&kp N1     &kp N2    &kp N3  &kp N4  &kp N5    &kp N6  &kp N7     &kp N8     &kp N9    &kp N0
&kp BSLH   &none     &none   &none   &none     &none   &none      &trans     &trans    &trans
                             &trans  &trans    &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&kp TAB  &sh_lalt  &sh_lctrl  &sh_lgui  &none     &none            &none           &none         &none            &kp BACKSPACE // Using sticky_hold for modifiers
&kp ESC  &mo 3     &mkp MB4   &mkp MB5  &none     &kp LEFT_ARROW   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp ENTER
&mo 4    &none     &none      &none     &none     &none            &none           &none         &none            &mo 5
                             &trans    &trans    &kp RIGHT_SHIFT  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans    &trans    &trans      &trans          &trans          &trans        &trans           &trans
&trans  &trans  &mkp MB1  &mkp MB2  &mkp MB3    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans  &trans    &trans    &trans      &trans          &trans          &trans        &trans           &trans
                          &trans    &trans      &trans          &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&mo 4   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &mo 5
                        &trans  &trans    &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&mo 4   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &mo 5
                        &trans  &trans    &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&none   &kp F1  &kp F2   &kp F3   &kp F4     &none   &bt BT_PRV  &bt BT_NXT      &none  &none
&none   &kp F5  &kp F6   &kp F7   &kp F8     &none   &none       &none           &none  &none
&trans  &kp F9  &kp F10  &kp F11  &kp F12    &none   &bt BT_CLR  &bt BT_CLR_ALL  &none  &trans
                         &trans   &trans     &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bltfn {
            if-layers = <4 5>;
            then-layer = <6>;
        };
    };
};
